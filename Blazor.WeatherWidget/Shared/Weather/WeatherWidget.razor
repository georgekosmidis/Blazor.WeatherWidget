@using Blazor.WeatherWidget.Services
@using Blazor.WeatherWidget.Shared.Weather.OpenWeatherMap.Models;

@inject WeatherService service


@if (root == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row align-items-center align-content-center">
            <div class="col-12 fs-4">
                Current Weather for @root.Name, @root.Sys.Country
            </div>
        </div>
        <div class="row align-items-center align-content-end">
            <div class="col-7">

            </div>
            <div class="col-5 small text-secondary">
                @root.Custom_Dt
            </div>
        </div>
        <div class="row align-items-center">
            <div class="col-3">
                <img src="http://openweathermap.org/img/wn/@root.Weather[0].Icon@@2x.png" width="90" />
            </div>
            <div class="col-3 fs-3">
                @Math.Round(@root.Main.Custom_Temp_Celcius, 1)&nbsp;°C
            </div>
            <div class="col-6 small">
                @root.Weather[0].Custom_Description with @root.Wind.Custom_WindName coming from @root.Wind.Custom_Direction
            </div>
        </div>
        <div class="row">
            <div class="col col-12">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-5 small">
                            Feels Like
                        </div>
                        <div class="col-1 small">
                            :
                        </div>
                        <div class="col-3 small">
                            @Math.Round(@root.Main.Custom_FeelsLike_Celcius, 1)&nbsp;°C
                        </div>
                        <div class="col-2 small">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-5 small">
                            Humidity
                        </div>
                        <div class="col-1 small">
                            :
                        </div>
                        <div class="col-3 small">
                            @root.Main.Humidity%
                        </div>
                        <div class="col-2 small">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-5 small">
                            Cloud Coverage
                        </div>
                        <div class="col-1 small">
                            :
                        </div>
                        <div class="col-3 small">
                            @root.Clouds.All%
                        </div>
                        <div class="col-2 small">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-5 small">
                            Wind Speed
                        </div>
                        <div class="col-1 small">
                            :
                        </div>
                        <div class="col-4 small">
                            @root.Wind.Speed m/s
                        </div>
                        <div class="col-2 small">

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center align-content-end">
            <div class="col-6">
                <div role="alert" class="text-danger small" style="visibility:@WarningVisibility">
                    Place not found!
                </div>
            </div>
            <div class="col-4 align-content-end">
                <input class="form-control form-control-sm" value="@CurrentCity" type="text" placeholder="City / Place" @oninput="@((e) => { CurrentCity=(string)e.Value;})">
            </div>
            <div class="col-2 small">
                <button class="btn btn-info" type="button" @onclick="OnSearchNewCity">Go!</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CurrentCity { get; set; } = "Munich, DE";

    private Root root;
    private string WarningVisibility { get; set; } = "hidden";

    protected override async Task OnInitializedAsync()
    {
        root = await service.Get(CurrentCity, "d62ef178ee8ddfd06ed6dbaedfb45c4c");
    }

    private async Task OnSearchNewCity()
    {
        root = null;
        root = await service.Get(CurrentCity, "d62ef178ee8ddfd06ed6dbaedfb45c4c");
        if (root.Base == null)
        {
            root = await service.Get("Munich, DE", "d62ef178ee8ddfd06ed6dbaedfb45c4c");
            WarningVisibility = "visible";
        }
        else
        {
            WarningVisibility = "hidden";
        }
    }
}
