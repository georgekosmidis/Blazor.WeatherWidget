@using Blazor.WeatherWidget.Services
@using Blazor.WeatherWidget.Models;
@using Blazor.WeatherWidget.Settings
@using Microsoft.Extensions.Options


@inject IWeatherService service
@inject IOptions<WeatherWidgetSettings> weatherWidgetSettings

@{
    RenderFragment bootstrapTemplate =
    @<div class="container">
        @if (result != null && result.Base != null)
        {
            <div class="row align-items-center align-content-center">
                <div class="col-12 fs-4">
                    Current Weather for @result.CityName, @result.Sys.Country
                </div>
            </div>
            <div class="row align-items-center align-content-end">
                <div class="col-7">

                </div>
                <div class="col-5 small text-secondary">
                    @result.DateTimeLocal
                </div>
            </div>
            <div class="row align-items-center">
                <div class="col-3">
                    <img src="@result.Weather[0].DefaultIcon" width="90" />
                </div>
                <div class="col-3 fs-3">
                    @Math.Round(result.Main.Temperature, 1)&nbsp;°C
                </div>
                <div class="col-6 small">
                    @result.Weather[0].Description,  @result.Wind.Description coming from @result.Wind.NamedDirection
                </div>
            </div>
            <div class="row">
                <div class="col col-12">
                    <div class="container">
                        <div class="row align-items-center">
                            <div class="col-5 small">
                                Feels Like
                            </div>
                            <div class="col-1 small">
                                :
                            </div>
                            <div class="col-3 small">
                                @Math.Round(result.Main.FeelsLike, 1)&nbsp;°C
                            </div>
                            <div class="col-2 small">

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-5 small">
                                Humidity
                            </div>
                            <div class="col-1 small">
                                :
                            </div>
                            <div class="col-3 small">
                                @result.Main.Humidity%
                            </div>
                            <div class="col-2 small">

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-5 small">
                                Cloud Coverage
                            </div>
                            <div class="col-1 small">
                                :
                            </div>
                            <div class="col-3 small">
                                @result.Clouds.Coverage%
                            </div>
                            <div class="col-2 small">

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-5 small">
                                Wind Speed
                            </div>
                            <div class="col-1 small">
                                :
                            </div>
                            <div class="col-4 small">
                                @result.Wind.Speed m/s
                            </div>
                            <div class="col-2 small">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="row align-items-center align-content-end">
            <div class="col-6">
                <div role="alert" class="text-danger small" style="visibility:@(result.Base == null ? "visible" : "hidden" )">
                    Place not found!
                </div>
            </div>
            <div class="col-4 align-content-end">
                <input class="form-control form-control-sm" value="@CurrentCity" type="text" placeholder="City / Place" @oninput="@(OnCurrentCityChanged)">
            </div>
            <div class="col-2 small">
                <button class="btn btn-info" type="button" @onclick="OnSearchNewCity">Go!</button>
            </div>
        </div>
    </div>;
}

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    switch (Template)
    {
        case WeatherWidgetTemplate.DefaultBootStrap:
            @bootstrapTemplate
            break;
        case WeatherWidgetTemplate.Custom:
            @CustomTemplate(result)
            break;
    }
}

@code {
    [Parameter]
    public WeatherWidgetTemplate Template { get; set; }

    [Parameter]
    public RenderFragment<WeatherGetResult> CustomTemplate { get; set; }

    [Parameter]
    public string CurrentCity { get; set; } = "Munich, DE";

    [Parameter]
    public string Unit { get; set; } = "metric";

    [Parameter]
    //This provides support for two-way binding from parent component e.g. <WeatherWidget @bind-CurrentCity= "@currentCity" />
    public EventCallback<string> CurrentCityChanged { get; set; }

    private WeatherGetResult result;

    protected override async Task OnParametersSetAsync()
    {
        if (Template == WeatherWidgetTemplate.Custom && CustomTemplate == null)
        {
            throw new ArgumentException("CustomTemplate parameter cannot be null if Template is WeatherWidgetTemplate.Custom", nameof(CustomTemplate));
        }

        //Moved here from OnInit to reload if CurrentCity parameter changes
        //More info on blazor lifecycle methods here
        //https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-5.0
        result = await service.GetAsync(CurrentCity, weatherWidgetSettings.Value.OpenWeatherApiKey, Unit);
    }

    private async Task OnSearchNewCity()
    {
        result = null;
        result = await service.GetAsync(CurrentCity, weatherWidgetSettings.Value.OpenWeatherApiKey, Unit);
    }

    private async Task OnCurrentCityChanged(ChangeEventArgs e)
    {
        CurrentCity = (string)e.Value;
        if (CurrentCityChanged.HasDelegate)
        {
            //This updates parent element if it uses two-way binding. Safe to use if no callback was given.
            await CurrentCityChanged.InvokeAsync(CurrentCity);
        }
    }
}
